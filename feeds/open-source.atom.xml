<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Paylogic Developers</title><link href="http://developer.paylogic.com/" rel="alternate"></link><link href="http://developer.paylogic.com/feeds/open-source.atom.xml" rel="self"></link><id>http://developer.paylogic.com/</id><updated>2015-02-09T13:01:00+01:00</updated><entry><title>pushserver</title><link href="http://developer.paylogic.com/articles/pushserver.html" rel="alternate"></link><updated>2015-02-09T13:01:00+01:00</updated><author><name>Anatoly Bubenkov</name></author><id>tag:developer.paylogic.com,2015-02-09:articles/pushserver.html</id><summary type="html">
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Paylogic constantly works on improving the user experience of our frontoffice. One of the important things when you
buy a ticket, is the availability counter. The availability counter shows the user how many tickets
(for a certain venue) are available for purchase.
Paylogic Frontoffice - is one of our products which is a web application to sell the tickets for the merchant events.
It is simple, powerful and flexible to satisfy our clients needs. Visually it's done as a wizard with dynamic set of
steps: tickets, overview, payment and so on.
At the moment the Paylogic frontoffice does not show ticket availability: if the ticket locking went
fine users are simply forwarded to the next step. If there's not enough tickets available, you're
informed about that. This leads to the need of the constant request-response football between the user and the backend
just to figure out the maximum number of tickets the user can buy.
&lt;a class="reference external" href="https://github.com/paylogic/pushserver"&gt;pushserver&lt;/a&gt; which enables backend services to send real-time events
to web clients.
This article describes the motivation, technology in brief and implementation details of the &lt;tt class="docutils literal"&gt;pushserver&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="user-experience"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;User experience&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Paylogic constantly improves the user experience of our products. Frontoffice
(the service which does the actual sale) is the most important among them. Basic flow of the ticket sale
contains such steps (simplified):&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Get the list of tickets (ticket types)&lt;/li&gt;
&lt;li&gt;Select ticket(s) quantities&lt;/li&gt;
&lt;li&gt;Check out the basket&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The second step becomes difficult for the user, if the number of tickets is limited (which is usually the case).
The user, to make a right choice, needs to know how many tickets are available.
But how does he know, and more importantly, when, that availability was changed?
This problem can be solved in several ways:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;Update the availability when the choice is made, if there's not enough, there will be an user error with availability counter.&lt;/dt&gt;
&lt;dd&gt;This is probably the simplest option to implement, but from the user perspective most unnatural and unintuitive, as
he doesn't expect there is only 1 ticket left, if the select box with the quantity allows him to select 10.&lt;/dd&gt;
&lt;dt&gt;Update the availability once per certain amount of time, e.g. every second.&lt;/dt&gt;
&lt;dd&gt;This is more user-friendly. But if we'll keep the period very short to emulate real-time updates, then it will be
problematic for the server to handle, as it will look like real DDOS attack from many clients (during the peak
sales we have thousands and thousands of concurrent connections).&lt;/dd&gt;
&lt;dt&gt;Update the availability at the time it changes.&lt;/dt&gt;
&lt;dd&gt;If there's no change, why bother client's browser with the old information?
Also the server is not attacked anymore.&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class="section" id="but-how-to-implement-this"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;But how to implement this?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So we need a way to send updates from the server to the client, without the need of explicit request for the new info
from the client side.
There's a nice &lt;a class="reference external" href="http://stackoverflow.com/questions/11077857/what-are-long-polling-websockets-server-sent-events-sse-and-comet/12855533#12855533"&gt;answer&lt;/a&gt;
which describes the basics.&lt;/p&gt;
&lt;p&gt;So we have options:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Push_technology#Long_polling"&gt;Long polling&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Browser support is 100%. That's probably the strongest side of this technique. But reconnection and state restore is
completely the problem of the implementation, there's no helpers provided by the standard as there's no such:
it's just normal HTTP, which ends in some long period, and for the browser it's like one big document.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/WebSocket"&gt;Websockets&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;&lt;a class="reference external" href="http://caniuse.com/websockets"&gt;Browser support&lt;/a&gt; is not 100% but is very good, but is it what's needed? It is, but
it gives us much more that enough: it's two-way communication channel. But we don't really need it for our problem.
Most if not all updates are coming &lt;tt class="docutils literal"&gt;from&lt;/tt&gt; the server. Updates from the client are normal requests (XMLHttpRequest)
if there is a need. Also websockets are not HTTP but TCP (HTTP is used only during the handshake)
so it requires much more hassle from the OPIT side, as they will need to set up the balancing on the TCP level.&lt;/dd&gt;
&lt;dt&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Server-sent_events"&gt;Server sent events (SSE)&lt;/a&gt;&lt;/dt&gt;
&lt;dd&gt;Browser support is &lt;a class="reference external" href="http://caniuse.com/eventsource"&gt;not that bad&lt;/a&gt;, and increasing constantly. It's one-way
communication channel, but with very useful features provided by the browser: state restore on connection failure (
browser sends the last event ID it received since disconnection), automatic reconnection and a very easy javascript
interface.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;Those options provide possibilities we need but they are not equal, so SSE seems to be the most optimal.
As we use Python a lot, we've looked around for some existing solutions which implement SSE server-side, we've found
&lt;a class="reference external" href="https://github.com/DazWorrall/flask-sse"&gt;flask sse&lt;/a&gt;, which seemed what we need.&lt;/p&gt;
&lt;p&gt;Flask-sse uses redis &lt;a class="reference external" href="http://redis.io/topics/pubsub"&gt;pubsub&lt;/a&gt; as a backend for broadcasting the events from the server.
Using &lt;a class="reference external" href="http://redis.io/topics/cluster-spec"&gt;redis-cluster&lt;/a&gt; which is currently in beta, but
&lt;a class="reference external" href="https://twitter.com/antirez/status/478425814040854528"&gt;will be released soon&lt;/a&gt; (and actually already used in
production as reported by Salvatore Sanfilippo) allows us to have high available, scalable web service.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="use-case"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Use-case&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Possible use-case can be drawn as following:&lt;/p&gt;
&lt;img alt="pushserver use-case from the user perspective" class="align-center" src="http://developer.paylogic.com/images/pushserver/diagram-user-perspective.png"/&gt;
&lt;p&gt;Actor changes some data on the backend via normal request to the backend. All users receive the broadcasted message
from the backend via long-lasting channel for server-sent events.&lt;/p&gt;
&lt;p&gt;And the deployment can look like:&lt;/p&gt;
&lt;img alt="pushserver use-case possible deployment schema" class="align-center" src="http://developer.paylogic.com/images/pushserver/diagram-deployment.png"/&gt;
&lt;/div&gt;
&lt;div class="section" id="sending-events-to-a-push-server-from-your-app"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id5"&gt;Sending events to a push server from your app&lt;/a&gt;&lt;/h2&gt;
&lt;pre class="literal-block"&gt;
from flask.ext.sse import send_event

send_event('myevent', {"message": "Hello!"}, channel='mychannel')
&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="section" id="client-side"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Client side&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On the client side you just need a javascipt handler function which will be called when a new message is pushed
from the server.&lt;/p&gt;
&lt;pre class="literal-block"&gt;
var source = new EventSource('/stream?channel=mychannel');
source.addEventListener('myevent', function (event) {
     alert(event.data);
};
&lt;/pre&gt;
&lt;p&gt;Server-Sent Events are &lt;a class="reference external" href="http://caniuse.com/#feat=eventsource"&gt;supported&lt;/a&gt; by recent Firefox,
Chrome and Safari browsers.
Internet Explorer does not yet support Server-Sent Events, so there are two recommended Polyfills
to support older browsers:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/remy/polyfills/blob/master/EventSource.js"&gt;EventSource.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://github.com/rwldrn/jquery.eventsource"&gt;jquery.eventsource&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Mobile browsers have limited support, so test carefully if it works for your target set of browsers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="live-demo"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;Live demo&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Here is a small demo video of the potential of this technique: we use pushserver to update the ticket availability in
our frontoffice application, which is where users can buy the tickets. The left and right windows are operated by
different users and are completely independent. When ticket availability is changed by the action from the left
window's operator, the right window changes instantly, without the polling involved (you can see the network bar).&lt;/p&gt;
&lt;p&gt;Simple frontoffice where you can only select the quantity of the ticket(s):&lt;/p&gt;
&lt;video controls="" height="480" poster="/images/pushserver/pushserver-in-action.png" preload="none" src="/videos/pushserver-in-action.mov" width="720"&gt;&lt;/video&gt;&lt;p&gt;More advanced example, where you can pick a seat:&lt;/p&gt;
&lt;video controls="" height="480" poster="/images/pushserver/pushserver-seating-demo.png" preload="none" src="/videos/pushserver-seating-demo.mov" width="720"&gt;&lt;/video&gt;&lt;/div&gt;
&lt;div class="section" id="future-considerations-for-paylogic"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Future considerations for Paylogic&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We are considering to create a special stream API, where API users can listen to the events to get them instantly
instead of polling the state from time to time. This is especially important for the cases like result of the
payment processing, availability change, etc.
For now, it's more like an experiment for us, but it's a promising technology and we're eager to hear some feedback from
the developers who use our API if it will be useful for them to have the stream API.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="open source"></category><category term="python"></category><category term="redis-cluster"></category><category term="push notifications"></category><category term="server-sent events"></category><category term="SSE"></category><category term="html5"></category><category term="pub/sub"></category></entry><entry><title>Traduki</title><link href="http://developer.paylogic.com/articles/traduki.html" rel="alternate"></link><updated>2014-10-27T10:00:00+01:00</updated><author><name>Spyros Ioakeimidis</name></author><id>tag:developer.paylogic.com,2014-10-27:articles/traduki.html</id><summary type="html">
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt; is an &lt;a class="reference external" href="https://github.com/paylogic/traduki"&gt;open source&lt;/a&gt;
package, which consists of internationalization helper classes targeted for
SQLAlchemy-based python projects. The advantage of using &lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt; is that
it removes the burden of defining translation tables, and provides
a consistent, intuitive and easy way to introduce internationalization into
your application. Minimalistic design allowed us to use only
&lt;a class="reference external" href="http://www.sqlalchemy.org/"&gt;SQLAlchemy&lt;/a&gt; as a python dependency.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="why-we-were-in-a-need-of-something-different"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;Why we were in a need of something different&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As Paylogic operates in several countries, internationalization is a strong
requirement. However, we used to do internationalization differently from how
we do it these days. Our former approach was to join translation tables in order
to obtain the translations. This allowed us to search on the internationalized
fields, but it required a lot of joins, even in cases where searching was not a requirement.
We could either &lt;a class="reference external" href="http://docs.sqlalchemy.org/en/rel_0_9/orm/tutorial.html#eager-loading"&gt;eager load&lt;/a&gt;,
load relationships at the same time the parent is loaded, or
&lt;a class="reference external" href="http://docs.sqlalchemy.org/en/rel_0_9/glossary.html#term-lazy-loading"&gt;lazy load&lt;/a&gt;,
load relationships the first time they are accessed. When we lazy load,
and access an internationalized property, we cause two queries per property.&lt;/p&gt;
&lt;p&gt;One of these queries is to the translations table, and the other one
to a table with only the ids. The translations table had one translation per
row, which made it inefficient and difficult to get all the translations for
all the properties in one row. For example,&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="9%"&gt;&lt;/col&gt;
&lt;col width="34%"&gt;&lt;/col&gt;
&lt;col width="20%"&gt;&lt;/col&gt;
&lt;col width="36%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head" colspan="4"&gt;Translation&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="head"&gt;id&lt;/th&gt;
&lt;th class="head"&gt;language_code&lt;/th&gt;
&lt;th class="head"&gt;text_id&lt;/th&gt;
&lt;th class="head"&gt;localized_text&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;en&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;English title 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;nl&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;Dutch title 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;en&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;English subtitle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;nl&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;Dutch subtitle&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;en&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;English title 2&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;nl&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;Dutch title 2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;where the &lt;code&gt;text_id&lt;/code&gt; references the &lt;code&gt;title_id&lt;/code&gt; and
&lt;code&gt;subtitle_id&lt;/code&gt; fields from a hypothetical &lt;code&gt;Event&lt;/code&gt; table.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="15%"&gt;&lt;/col&gt;
&lt;col width="37%"&gt;&lt;/col&gt;
&lt;col width="48%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head" colspan="3"&gt;Event&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="head"&gt;id&lt;/th&gt;
&lt;th class="head"&gt;title_id&lt;/th&gt;
&lt;th class="head"&gt;subtitle_id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;This approach was inefficient because for &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; properties and &lt;tt class="docutils literal"&gt;m&lt;/tt&gt;
languages, we would need to do &lt;tt class="docutils literal"&gt;n*m&lt;/tt&gt; joins. The difficult part comes from
the fact that it was cumbersome to write those queries. In the case of
the previous example,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;a_alias&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;aliased&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Translation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
    &lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Translation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
    &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Translation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_id&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
    &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a_alias&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text_id&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;subtitle_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
    &lt;span class="nb"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;in_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_ids&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;\
    &lt;span class="nb"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The end-result was that we did not do this, and we were doing more one-row queries.
We should mention that normally we don't need objects to have dynamic list
of available languages. Maybe it is a strict requirement in other use cases,
but in our use case it is enough to just use a static set of available languages,
which change infrequently.&lt;/p&gt;
&lt;p&gt;Another issue with this approach was that the number of results returned from
queries was not deterministic, and required left joins which is even worse
performance-wise. Most of the time you want to eager load relationships.
However, in this case you can never apply a limit or offset because you cannot
trust the number of rows returned.&lt;/p&gt;
&lt;p&gt;The aforementioned approach had performance issues. We wanted to be able to
search on the internationalized fields and search fast, which was not possible.
Another requirement was that we wanted language chains. What this means is that
if your language is Dutch, but only the English version of the text is
available, we should display by default the English version of it.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="advantages-of-the-new-design"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Advantages of the new design&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In the end, taking into consideration our motivation and requirements, we came up
with our solution on how to solve the problem of i18n. The following
example illustrates our current approach using &lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt;. Let's assume that we
have a table &lt;code&gt;Event&lt;/code&gt;, and we want the &lt;tt class="docutils literal"&gt;title&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;subtitle&lt;/tt&gt; to be
translated into English and Dutch. The &lt;code&gt;Event&lt;/code&gt; table contains the ids of
the fields that we wish to have available in those two languages. Let's also
assume that for the event with &lt;code&gt;id = 8&lt;/code&gt;, the Dutch translation is not
available.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="15%"&gt;&lt;/col&gt;
&lt;col width="37%"&gt;&lt;/col&gt;
&lt;col width="48%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head" colspan="3"&gt;Event&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="head"&gt;id&lt;/th&gt;
&lt;th class="head"&gt;title_id&lt;/th&gt;
&lt;th class="head"&gt;subtitle_id&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;26&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;code&gt;Translation&lt;/code&gt; table would then contain a reference to those fields
that we wish to have translated. The &lt;code&gt;id = 10&lt;/code&gt; for the &lt;tt class="docutils literal"&gt;title&lt;/tt&gt; and
&lt;code&gt;id = 11&lt;/code&gt; for the &lt;tt class="docutils literal"&gt;subtitle&lt;/tt&gt; of the first event, and &lt;code&gt;id = 25&lt;/code&gt;
and &lt;code&gt;id = 26&lt;/code&gt; for the &lt;tt class="docutils literal"&gt;title&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;subtitle&lt;/tt&gt; for the second event
respectively. It also contains the translated texts in English and Dutch
(only for the first event). With this approach, we can easily get the
translated texts by joining the &lt;code&gt;Event&lt;/code&gt; and &lt;code&gt;Translation&lt;/code&gt; tables.&lt;/p&gt;
&lt;table border="1" class="docutils"&gt;
&lt;colgroup&gt;
&lt;col width="10%"&gt;&lt;/col&gt;
&lt;col width="45%"&gt;&lt;/col&gt;
&lt;col width="45%"&gt;&lt;/col&gt;
&lt;/colgroup&gt;
&lt;thead valign="bottom"&gt;
&lt;tr&gt;&lt;th class="head" colspan="3"&gt;Translation&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;th class="head"&gt;id&lt;/th&gt;
&lt;th class="head"&gt;en&lt;/th&gt;
&lt;th class="head"&gt;nl&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;English title 1&lt;/td&gt;
&lt;td&gt;Dutch title 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;English subtitle 1&lt;/td&gt;
&lt;td&gt;Dutch subtitle 1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;td&gt;...&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;25&lt;/td&gt;
&lt;td&gt;English title 2&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;&lt;td&gt;26&lt;/td&gt;
&lt;td&gt;English subtitle 2&lt;/td&gt;
&lt;td&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The advantage of this approach is that with a simple join between these tables
on the id of the text (for example the &lt;tt class="docutils literal"&gt;title_id&lt;/tt&gt;), we get one row with all
the translations.&lt;/p&gt;
&lt;pre class="code python literal-block"&gt;
&lt;span class="n"&gt;q&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Translation&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Event&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title_id&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;Translation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;As can be seen from the query, for &lt;tt class="docutils literal"&gt;n&lt;/tt&gt; properties and &lt;tt class="docutils literal"&gt;m&lt;/tt&gt; languages,
the number of joins is reduced from &lt;tt class="docutils literal"&gt;n*m&lt;/tt&gt; to &lt;tt class="docutils literal"&gt;n&lt;/tt&gt;, making them also more
intuitive since all translated items are foreign keys to the &lt;code&gt;Translation&lt;/code&gt;
table, joining once per foreign key. Additionally, &lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt; returns a user-friendly
format of this result as a dictionary of language codes and translations. For example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'en'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'English title 1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'nl'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Dutch title 1'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In case of the second event, where the Dutch translation is not available,
&lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt; falls back to the language that we have defined, in this
case English. So it will return:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'en'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'English title 2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'nl'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'English title 2'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This approach has one drawback. When a new language is introduced then we need
to alter the translations table to include it. Although this operation can be expensive,
we found out that the gains in performance are higher, because we search and sort much
more often than we add new languages. Also, for us it is more important to have a static
set of available languages than actually adding new languages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="how-it-works"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;How it works&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt; is very simple to use. The following example is a concise and
stand-alone application that illustrates the use of &lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt;. It is
split in parts, to better explain how each part works.&lt;/p&gt;
&lt;div class="section" id="example"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Example&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first part is straightforward. We do standard sqlalchemy imports,
create the engine (in this case the database will be in memory), and define the
declarative base for our models.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;traduki&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Integer&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.ext.declarative&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;sqlalchemy.orm&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;

&lt;span class="n"&gt;engine&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;create_engine&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'sqlite://'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Base&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;declarative_base&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The next part is where &lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt; is used. We define two callbacks, one
for getting the current language and one for getting the language chain. Here
we just return hard coded data for simplicity. We could read this data from a
current &lt;tt class="docutils literal"&gt;request&lt;/tt&gt; object, for example using &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;
request, something like &lt;code&gt;flask.request.locale&lt;/code&gt; to get the current language.
We use these callbacks when we deal with the initialization of the &lt;code&gt;i18n_attributes&lt;/code&gt;.
&lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt; at the moment of initialization declares the model for the translations
dynamically and sets up all the appropriate relationships.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_current_language&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""Current language callback for our project."""&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s"&gt;'en'&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_language_chain&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="sd"&gt;"""Language chain (fall-back rule) callback for our project."""&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'*'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'en'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;i18n_attributes&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;traduki&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;initialize&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'en'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'nl'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;get_current_language&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;get_language_chain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The language list that we pass to &lt;code&gt;traduki.initialize&lt;/code&gt; function is used
to declare language columns in translations model. So if we use &lt;code&gt;['en', 'nl']&lt;/code&gt;
the resulting translations model would be something similar to the following declaration.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Translation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'traduki_translation'&lt;/span&gt;

    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;en&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UnicodeText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;nl&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;UnicodeText&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Back to our example, we define our model and use the column and relation provided by
&lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt;. The rest is just to have a complete and running example.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="n"&gt;__tablename__&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'model'&lt;/span&gt;

    &lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;primary_key&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;title_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i18n_attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i18n_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nullable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i18n_attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;i18n_relation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;title_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="sd"&gt;"""Title."""&lt;/span&gt;

&lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;metadata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;create_all&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sessionmaker&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;bind&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;engine&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Session&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'en'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'English title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'nl'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Dutch title'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;refresh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_dict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s"&gt;'en'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'English title'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'nl'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s"&gt;'Dutch title'&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s"&gt;'English title'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To run this example, copy and paste these parts in an &lt;tt class="docutils literal"&gt;example.py&lt;/tt&gt; file, and
use the following commands to install the required packages and run the
example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;virtualenv env

&lt;span class="nb"&gt;source &lt;/span&gt;env/bin/activate

pip install sqlalchemy traduki

python example.py
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="querying"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Querying&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Querying translations can also be done using usual SQLAlchemy techniques.
From the previous example, lets assume that we want to get all &lt;code&gt;Model&lt;/code&gt;
instances that have English translation for their &lt;code&gt;title&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;english_title_objects&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;i18n_attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Translation&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;Model&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;title_id&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;i18n_attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Translation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i18n_attributes&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Translation&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;en&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isnot&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;all&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code&gt;i18n_attributes.Translation&lt;/code&gt; is the translations model declared during initialization
of &lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt;. It provides helper methods to get the text of a specified language
and get the available languages as a dictionary. It also contains language fields as attributes,
which is nice as it enables directly attribute access to get a language for a specific field
&lt;code&gt;model.title.en&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="the-difference-from-sqlalchemy-i18n"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id7"&gt;The difference from SQLAlchemy-i18n&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We conducted research on how to make an efficient design. We tried lots of
ways to minimize the timing of the queries for large datasets. Also we've looked
around for existing solutions and we found &lt;a class="reference external" href="https://github.com/kvesteri/sqlalchemy-i18n"&gt;SQLAlchemy-i18n&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The approach of this project is to create a separate translations table and each row in the table
is a translation in a specific language for a specific field. This is similar to our
previous approach and has the same limitations in performance. You need to explicitly
query for languages and fields and do lots of joins. What &lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt; does, is load all the languages
and translations for a field. This might sound like a lot of overhead at first, but in modern
applications you usually have 10-12 languages and you want them to be available all at once in
the client.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In general, not much has been done on i18n in open source. We hope that &lt;tt class="docutils literal"&gt;traduki&lt;/tt&gt; will prove
useful for projects that require an efficient and easy to use internationalization system.
We are waiting for your feedback and recommendations. Check &lt;a class="reference external" href="https://github.com/paylogic/traduki"&gt;traduki&lt;/a&gt;
in our github profile.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="internationalization"></category><category term="sqlalchemy"></category><category term="python"></category><category term="database"></category><category term="i18n"></category></entry><entry><title>Paylogic Code review tool</title><link href="http://developer.paylogic.com/articles/codereview.html" rel="alternate"></link><updated>2014-07-17T09:00:00+02:00</updated><author><name>Anatoly Bubenkov</name></author><id>tag:developer.paylogic.com,2014-07-17:articles/codereview.html</id><summary type="html">
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id1"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As open sourcing software is a strategic decision of Paylogic we decided not to make an exception for our
development tools, in the hope that they are of use to the community. The code review tool is probably our most
important development tool, so we decided to start with that. The Github repository can be found
&lt;a class="reference external" href="https://github.com/paylogic/codereview"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="http://en.wikipedia.org/wiki/Code_review"&gt;Code review&lt;/a&gt; is one of the main pillars of the Paylogic development
process. We have multiple projects ongoing, and none of the code changes can go into the stable repository
without at least 2 code reviews. The last code review is done by a special company role - &lt;tt class="docutils literal"&gt;Gatekeeper&lt;/tt&gt;.&lt;/p&gt;
&lt;p&gt;We will reveal more about the gatekeeper process in later articles, but you can already see that code reviewing
is a very important process for us, so the tool we use for it is important as well.&lt;/p&gt;
&lt;p&gt;This article covers and explains the choice of the tool, its customizations, and the use case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="the-choice"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id2"&gt;The Choice&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In 2011 we had to choose a code review tool, and after a thorough research
&lt;a class="reference external" href="https://code.google.com/p/rietveld/"&gt;rietveld&lt;/a&gt; seemed one of the best solutions for our specific needs:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Web based.&lt;/li&gt;
&lt;li&gt;Minimalistic, code centric interface.&lt;/li&gt;
&lt;li&gt;Has keyboard shortcuts for easy code review navigation.&lt;/li&gt;
&lt;li&gt;Written in python, so it's easy to change and maintain.&lt;/li&gt;
&lt;li&gt;Has a community which improves it constantly.&lt;/li&gt;
&lt;li&gt;Simple installation on a private server.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="customizations"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Customizations&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So we decided to use rietveld. But we had to customize it significantly as our development process uses
&lt;a class="reference external" href="https://www.fogcreek.com/fogbugz/"&gt;Fogbugz&lt;/a&gt; as a case management tool. This means that every change to the
Paylogic codebase has a reference to a Fogbugz case, and the development itself is case-based.&lt;/p&gt;
&lt;p&gt;The whole picture of our continuous integration will be described in later article(s), however there was a
&lt;a class="reference external" href="http://www.slideshare.net/zittersteyn/advanced-continuous-integration-pygrunn-2014-dirk-zittersteyn"&gt;great talk&lt;/a&gt;
at our &lt;a class="reference external" href="http://pygrunn.org/"&gt;PyGrunn&lt;/a&gt; conference
on this topic from &lt;a class="reference external" href="http://nl.linkedin.com/in/dzittersteyn"&gt;Dirk Zittersteyn&lt;/a&gt;.  However, since it is important
to understand the role the code review tool plays in our ecosystem, the below image shows a part of the process.&lt;/p&gt;
&lt;img alt="gatekeepering and code review process" class="align-center" src="http://developer.paylogic.com/images/codereview/gatekeepering-and-code-review-process.png"/&gt;
&lt;p&gt;As you can see from the diagram (and the Legend), the code review tool is a critical part of our process.&lt;/p&gt;
&lt;p&gt;Before we continue, we'll give you a quick glossary for the rest of this article:&lt;/p&gt;
&lt;dl class="docutils"&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;original repository&lt;/tt&gt; (&lt;tt class="docutils literal"&gt;target repository&lt;/tt&gt;)&lt;/dt&gt;
&lt;dd&gt;Version control repository which is considered as a target in which to merge some proposed set of changes.&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;original branch&lt;/tt&gt; (&lt;tt class="docutils literal"&gt;target branch&lt;/tt&gt;)&lt;/dt&gt;
&lt;dd&gt;Version control branch in the &lt;tt class="docutils literal"&gt;original repository&lt;/tt&gt; in which to merge some proposed set of changes.&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;feature repository&lt;/tt&gt; (&lt;tt class="docutils literal"&gt;source repository&lt;/tt&gt;)&lt;/dt&gt;
&lt;dd&gt;Version control repository which is considered as a source of the proposed set of changes. This can be the same as
&lt;tt class="docutils literal"&gt;original repository&lt;/tt&gt;.&lt;/dd&gt;
&lt;dt&gt;&lt;tt class="docutils literal"&gt;feature branch&lt;/tt&gt; (&lt;tt class="docutils literal"&gt;source branch&lt;/tt&gt;)&lt;/dt&gt;
&lt;dd&gt;Version control branch in the &lt;tt class="docutils literal"&gt;source repository&lt;/tt&gt; which is considered as a source of the proposed
set of changes.&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;With the customizations we've made to &lt;tt class="docutils literal"&gt;rietveld&lt;/tt&gt;, we can now:&lt;/p&gt;
&lt;div class="section" id="use-corporate-single-sign-on-to-authorize-users-in-the-code-review-tool"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id4"&gt;Use corporate single sign-on to authorize users in the code review tool&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;It's important to remove unnecessary additional user management responsibilities from our Operational IT team. And of
course, from the user's perspective it's much less effort, as they can use a single corporate account to log in
(we use &lt;a class="reference external" href="http://www.google.com/enterprise/apps/business/"&gt;Google Apps for Business&lt;/a&gt;)&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="create-code-review-issues-patchsets-taking-any-required-information-from-the-corresponding-fogbugz-case"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Create code review issues (patchsets), taking any required information from the corresponding Fogbugz case&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This feature is implemented by creating a special endpoint on the code review tool which gets the case number as
a parameter, and retrieves the following fields from that case through the
&lt;a class="reference external" href="http://help.fogcreek.com/8202/xml-api"&gt;Fogbugz API&lt;/a&gt;:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Original (target) branch (for example &lt;tt class="docutils literal"&gt;master&lt;/tt&gt; or &lt;tt class="docutils literal"&gt;default&lt;/tt&gt;) - implemented using a custom field in Fogbugz.&lt;/li&gt;
&lt;li&gt;Feature (source) branch (for example &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;nice-feature&lt;/span&gt;&lt;/tt&gt;) - implemented using a custom field in Fogbugz.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For custom fields, we use the &lt;a class="reference external" href="http://www.fogcreek.com/fogbugz/plugins/plugin.aspx?ixPlugin=1"&gt;Custom Fields&lt;/a&gt; plugin.
From the Fogbugz side, it looks like this:&lt;/p&gt;
&lt;img alt="create patchset from Fogbugz" class="align-center" src="http://developer.paylogic.com/images/codereview/create-patchset.png"/&gt;
&lt;/div&gt;
&lt;div class="section" id="apply-custom-validations-for-any-patchsets-created"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id6"&gt;Apply custom validations for any patchsets created&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We implement some critical checks, where we for example don't allow the changing of certain non-editable files.
If any of the validations didn't pass, creation of the issue (i.e. an additional patchset) fails and shows an error
to the user.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="implement-gatekeepering-process-support"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Implement Gatekeepering process support&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Users with a special role can now &lt;tt class="docutils literal"&gt;approve&lt;/tt&gt; a certain revision of the feature branch.&lt;/p&gt;
&lt;p&gt;This is, again, implemented using a special custom field in Fogbugz called
&lt;tt class="docutils literal"&gt;approved revision&lt;/tt&gt;, together with the Fogbugz API to set it from the code review tool.&lt;/p&gt;
&lt;p&gt;In the code review tool:&lt;/p&gt;
&lt;img alt="approve revision from codereview by the gatekeeper, target branch autocompletion" class="align-center" src="http://developer.paylogic.com/images/codereview/approve-revision-click.png"/&gt;
&lt;p&gt;And in Fogbugz:&lt;/p&gt;
&lt;img alt="approved revision and ci project fields set in the Fogbugz" class="align-center" src="http://developer.paylogic.com/images/codereview/approved-revision-field.png"/&gt;
&lt;/div&gt;
&lt;div class="section" id="allow-gatekeepers-to-set-and-select-from-the-dropdown-the-target-branch-for-a-given-ci-project"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id8"&gt;Allow gatekeepers to set (and select from the dropdown) the target branch for a given CI project&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Both &lt;tt class="docutils literal"&gt;target branch&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;CI project&lt;/tt&gt; are custom fields of a Fogbugz case.&lt;/p&gt;
&lt;p&gt;In the code review tool:&lt;/p&gt;
&lt;img alt="approve revision from codereview by the gatekeeper, target branch autocompletion" class="align-center" src="http://developer.paylogic.com/images/codereview/approve-revision-target-branch.png"/&gt;
&lt;p&gt;And in Fogbugz:&lt;/p&gt;
&lt;img alt="target branch field in the Fogbugz" class="align-center" src="http://developer.paylogic.com/images/codereview/target-branch-field.png"/&gt;
&lt;/div&gt;
&lt;div class="section" id="support-creation-of-an-issue-patchset-using-bzr-git-and-mercurial-repositories"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Support creation of an issue (patchset), using bzr, git and mercurial repositories&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;All combinations are accepted for &lt;tt class="docutils literal"&gt;original&lt;/tt&gt; and &lt;tt class="docutils literal"&gt;feature&lt;/tt&gt; branch fields in Fogbugz.
As additional protection from &lt;tt class="docutils literal"&gt;phishing&lt;/tt&gt; on the &lt;tt class="docutils literal"&gt;original&lt;/tt&gt; branch, the latest revision from
the &lt;tt class="docutils literal"&gt;source repository&lt;/tt&gt;'s &lt;tt class="docutils literal"&gt;original branch&lt;/tt&gt; will be used to calculate a diff between
the &lt;tt class="docutils literal"&gt;source repository&lt;/tt&gt;'s &lt;tt class="docutils literal"&gt;feature branch&lt;/tt&gt; and the &lt;tt class="docutils literal"&gt;original repository&lt;/tt&gt;'s &lt;tt class="docutils literal"&gt;original branch&lt;/tt&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="problems-using-rietveld"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id10"&gt;Problems using rietveld&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;rietveld was developed specially for &lt;a class="reference external" href="https://developers.google.com/appengine/?csw=1"&gt;Google App Engine&lt;/a&gt;.
It has lots of benefits for developers who don't want to bother with any OpIT related tasks.
As we however have a strict requirement to host the code (and thus the code review tool) on our private servers, we used
&lt;a class="reference external" href="http://django-gae2django.googlecode.com/svn/trunk/examples/rietveld/README"&gt;gae2django&lt;/a&gt; to deploy rietveld locally.
What gae2django does is convert models that are supposed to be used with the
Google App Engine datastore to Django ORM models. This allows us to deploy the
application using relational databases such as (in our case) MySQL.&lt;/p&gt;
&lt;p&gt;This was &lt;tt class="docutils literal"&gt;good enough&lt;/tt&gt; for us, as up till now rietveld was using GAE DB (ext.db). But this is no longer the case.
Now rietveld uses &lt;a class="reference external" href="https://developers.google.com/appengine/docs/python/ndb/"&gt;NDB&lt;/a&gt; for its models. And it's simply
&lt;tt class="docutils literal"&gt;not possible&lt;/tt&gt; to implement automatic mapping from NDB-based models to django ORM models
because the difference is huge.&lt;/p&gt;
&lt;p&gt;So currently, we are in the situation that we cannot receive any updates from the rietveld repository any more,
so instead we have to support our &lt;tt class="docutils literal"&gt;fork&lt;/tt&gt; ourselves. For now this is &lt;tt class="docutils literal"&gt;acceptable&lt;/tt&gt;,
but we are considering moving to a different code review tool.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="want-to-use-it-or-to-try-it"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id11"&gt;Want to use it or to try it?&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;a class="reference external" href="https://github.com/paylogic/codereview/blob/master/README.rst"&gt;readme&lt;/a&gt; on Github contains all the information
required to set up the code review tool on your server. Don't hesitate to try it out.
If you have any problems with installation, please create an &lt;a class="reference external" href="https://github.com/paylogic/codereview/issues/"&gt;issue&lt;/a&gt;
on Github.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="future-considerations"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id12"&gt;Future considerations&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As was mentioned earlier, &lt;tt class="docutils literal"&gt;Review Board&lt;/tt&gt; will probably be the replacement for
our current solution. However, if we'll switch to git completely (which we haven't done yet) there are
some other alternatives to consider as well, such as:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;a class="reference external" href="https://www.gitlab.com/"&gt;GitLab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class="reference external" href="https://code.google.com/p/gerrit/"&gt;Gerrit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Any new tool we might choose will have to be customized in order to be an integral part of our development process.
This new customization will be open sourced as well.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="thanks-questions"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;"Thanks! Questions?"&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So regarding the code review, we've put all our cards on the table: from decision making to implementation,
support, and use cases. We hope that it will be useful for the community.
Feedback is, as usual, more than appreciated. Happy code reviewing, we wish you 0 comments on your reviews!&lt;/p&gt;
&lt;/div&gt;
</summary><category term="code review"></category><category term="gatekeeper"></category><category term="fogbugz"></category><category term="review"></category><category term="rietveld"></category><category term="open source"></category></entry><entry><title>Settei</title><link href="http://developer.paylogic.com/articles/settei.html" rel="alternate"></link><updated>2014-04-29T12:03:00+02:00</updated><author><name>Spyros Ioakeimidis</name></author><id>tag:developer.paylogic.com,2014-04-29:articles/settei.html</id><summary type="html">
&lt;div class="section" id="introduction"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id3"&gt;Introduction&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;settei&lt;/code&gt; is a general purpose python settings library which uses
&lt;a class="reference external" href="http://pythonhosted.org/setuptools/pkg_resources.html#entry-points"&gt;entry points&lt;/a&gt;
as a registry, inspired by &lt;a class="reference external" href="http://pythonhosted.org/setuptools/setuptools.html"&gt;setuptools&lt;/a&gt;.
It is a library which provides the possibility to define
and use configuration settings from entry points for specific applications and
environments. &lt;code&gt;settei&lt;/code&gt; introduces the following terms:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;environment&lt;/strong&gt;: the name of an entry point&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;group&lt;/strong&gt;: a group of defined environments&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;application&lt;/strong&gt;: part of a group's name and refers to the application to which
settings apply&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A minimal app that illustrates the use of &lt;cite&gt;settei&lt;/cite&gt; can be found
&lt;a class="reference external" href="https://github.com/paylogic/settei-example"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="motivation"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id4"&gt;Motivation&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At Paylogic we are extensively using &lt;a class="reference external" href="https://www.djangoproject.com/"&gt;Django&lt;/a&gt;
web framework for most parts of our system. Django uses the concept of
&lt;a class="reference external" href="https://docs.djangoproject.com/en/1.6/topics/settings/"&gt;setting files&lt;/a&gt;, in
which we can define application-specific settings, such as &lt;tt class="docutils literal"&gt;DEBUG&lt;/tt&gt;. In the
rest of the application we can access these settings using for example
&lt;code&gt;django.conf.settings.DEBUG&lt;/code&gt;. However, for other parts of our system we
are using &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt;, which follows a similar, but
slightly different way to define &lt;a class="reference external" href="http://flask.pocoo.org/docs/config/"&gt;configuration settings&lt;/a&gt;. In a Flask application a setting can
be accessed by for example &lt;code&gt;app.config['DEBUG']&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Soon we were confronted with the limitation to share configuration settings
between Flask and Django applications. Additionally, we wanted to keep these
configurations consistent. However, we found out that there was no
framework-agnostic Python library for specifying configuration settings.&lt;/p&gt;
&lt;p&gt;Moreover, as we have a clear separation between environments (e.g. dev, staging,
live etc.), some configuration settings are either set in one environment and
not in the others, or the same configuration settings have different values
depending on the environment. The code however should not know anything about
the environment in which it is executed. In this way the code does not need to
be modified, even when multiple environments are used.&lt;/p&gt;
&lt;p&gt;For this reason, we initially decided to create separate files to store
configuration settings, which could also change depending on the environment.
However, we ended up with many of these files, which at some point became
cumbersome to maintain.  Furthermore, some developers started importing settings
from these files and others used the standard way of Django. The result of this
is inconsistencies and conflicts, as the same setting can be imported from
different places.&lt;/p&gt;
&lt;div class="section" id="requirements"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id5"&gt;Requirements&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Based on this motivation, we came up with a number of requirements for a settings
configuration system.&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Introducing a new environment should be easy and without too much hassle.&lt;/li&gt;
&lt;li&gt;We should have the possibility to inherit/extend settings from other
environments.  This would allow us to build a modular and extensible structure
of configuration settings.&lt;/li&gt;
&lt;li&gt;There should be no specific template structure involved for generating
settings, because it gets really hard and cumbersome to read templates with
tons of expressions.&lt;/li&gt;
&lt;li&gt;It should be possible to store settings separately from applications and
scripts. The advantage of this is that we can create secret settings (usually
for the production environment) in a way that also makes them safe and that
does not depend on a specific application.&lt;/li&gt;
&lt;li&gt;A configuration settings system should be framework-agnostic so that it can be used
when multiple frameworks are involved.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="design"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id6"&gt;Design&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The most important design decision of &lt;code&gt;settei&lt;/code&gt; is to base its implementation
on the concept of &lt;a class="reference external" href="http://pythonhosted.org/setuptools/pkg_resources.html#entry-points"&gt;entry points&lt;/a&gt;
in order to create a framework-agnostic library for configuration settings.&lt;/p&gt;
&lt;div class="section" id="id2"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id7"&gt;Entry points&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Entry points provide an intuitive way for distributions to expose Python objects,
such as functions or classes, so that they can be used by other distributions.
Applications can then search for specific entry points. &lt;code&gt;settei&lt;/code&gt; uses the
concept of entry points to define groups of environments.&lt;/p&gt;
&lt;p&gt;So, what does using entry points mean? It means that we will have the possibility
to store settings in a distribution. Then, if we want to get access to settings of
e.g. a default or a local environment, we will need to have access to install this
distribution and include this distribution in the &lt;tt class="docutils literal"&gt;PYTHONPATH&lt;/tt&gt; of the script
or application.&lt;/p&gt;
&lt;div class="section" id="groups-and-environments"&gt;
&lt;h4&gt;Groups and environments&lt;/h4&gt;
&lt;p&gt;A group is a container of environments. An example of a group with two environments
could be:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;setup&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
    &lt;span class="n"&gt;entry_points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'settings_application_name'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s"&gt;'default = path.to.package.of.application_name.default_settings:generate_config'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'local = path.to.package.of.application_name.local_settings:generate_config'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="c"&gt;# ...&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The name of the group consists of two parts. The first is a standard prefix
part, &lt;code&gt;settings_&lt;/code&gt;, and the second is the name of the application. For
example, &lt;code&gt;settings_application_name&lt;/code&gt;, where &lt;code&gt;application_name&lt;/code&gt; is
the name of the application. The prefix part in the group name is mandatory as
it helps &lt;code&gt;settei&lt;/code&gt; to identify only entry points useful for it and iterate
through them.&lt;/p&gt;
&lt;p&gt;Each environment name inside a group must be &lt;tt class="docutils literal"&gt;unique&lt;/tt&gt;. In our example, in the
group &lt;code&gt;settings_application_name&lt;/code&gt; there should only be one environment named
&lt;code&gt;default&lt;/code&gt; and only one named &lt;code&gt;local&lt;/code&gt;. However, we can specify same
environment names that belong to different groups. If we specify environments
with the same name inside one group, then a &lt;code&gt;DuplicateEntryPoint&lt;/code&gt; exception
will be raised. This exception is used to avoid cases of scripts borrowing
settings from each other. For example, lets assume that in the previous example
we specified the &lt;tt class="docutils literal"&gt;default&lt;/tt&gt; environemnt twice. It would not be clear from which
file (default_settings.py or local_settings.py) we would read settings.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="example-usage"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id8"&gt;Example Usage&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;settei&lt;/code&gt; package can be configured and used in a series of simple steps.&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Define groups and environments in the &lt;tt class="docutils literal"&gt;setup.py&lt;/tt&gt; of the package.&lt;/li&gt;
&lt;li&gt;For each environment (e.g. default_settings), define the function to be used
as an entry point.&lt;/li&gt;
&lt;li&gt;Implement this function in the environment files (e.g. default_settings.py).
They should create and return a new instance of &lt;code&gt;Config&lt;/code&gt; with
configuration settings for this environment.&lt;/li&gt;
&lt;li&gt;Use the &lt;code&gt;get_config&lt;/code&gt; function in the rest of the package to read
configuration settings for specific applications and environments.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The best way to explain how &lt;code&gt;settei&lt;/code&gt; can be used is through examples.
The rest of this section goes into more detail for each of the above steps.&lt;/p&gt;
&lt;div class="section" id="define-groups-and-environments"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id9"&gt;Define groups and environments&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As a first step, we need to define environments and put them into groups. We are
free to choose the name of the function to be used as an entry point. In this case,
we chose the name &lt;code&gt;generate_config&lt;/code&gt;. Let's assume that our package contains
two applications.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# package/setup.py&lt;/span&gt;
&lt;span class="n"&gt;setup&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
    &lt;span class="n"&gt;entry_points&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s"&gt;'settings_application1'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s"&gt;'default = path.to.application1.default_settings:generate_config'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'local = path.to.application1.local_settings:generate_config'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="s"&gt;'settings_application2'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
            &lt;span class="s"&gt;'default = path.to.application2.default_settings:generate_config'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="s"&gt;'local = path.to.application2.local_settings:generate_config'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="c"&gt;# ...&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="create-settings"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id10"&gt;Create settings&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To create settings, we need an instance of the &lt;code&gt;Config&lt;/code&gt; class.
In the following example, we are using the function named &lt;code&gt;generate_config&lt;/code&gt;,
which we specified as an entry point when we defined the groups and environments.
The &lt;code&gt;generate_config&lt;/code&gt; function, in our case, returns an instance of the
&lt;code&gt;Config&lt;/code&gt; class. Settings can then be created either directly in the code,
be loaded from a python file, or come from an object. If there is any error
during configuration or a &lt;code&gt;Config&lt;/code&gt; instance is not returned, then a
&lt;code&gt;WrongConfigTypeError&lt;/code&gt; exception is raised.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# package/application1/default_settings.py&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;settei.config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_config&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;# create settings directly&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'QUESTION'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'The Ultimate Question of Life, the Universe, and Everything'&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ANSWER'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;41&lt;/span&gt;

    &lt;span class="c"&gt;# or load them from a file&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_pyfile&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'full/path/to/file.py'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# or from an object&lt;/span&gt;
    &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;from_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'path.to.object'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="read-settings"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id11"&gt;Read settings&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In order to use the settings of our package, we need to first install it using
&lt;code&gt;python setup.py install&lt;/code&gt; and make sure that it is in our path. We can then
read and use settings in the rest of our package
by using the &lt;code&gt;get_config&lt;/code&gt; function. Note that in the &lt;code&gt;get_config&lt;/code&gt;
function we specify the application name and not the group name. For example,
if we want to load settings for the application &lt;code&gt;application1&lt;/code&gt; and we have
defined a group of environments with the name &lt;code&gt;settings_application1&lt;/code&gt;,
then in the &lt;code&gt;get_config&lt;/code&gt; function we just use the name of the application,
which in this case is &lt;code&gt;application1&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;settei&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_config&lt;/span&gt;

&lt;span class="c"&gt;# get config settings for 'applicaion1' application and 'local' environment&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'application1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'local'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# get config settings for 'application2' application and 'local' environment&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'application2'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'local'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c"&gt;# now you can use it as you want&lt;/span&gt;
&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'DEBUG'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the environment from which we want to read settings does not exist, then an
&lt;code&gt;EnvironmentNotSpecified&lt;/code&gt; exception is raised.&lt;/p&gt;
&lt;p&gt;Another way to define the desired environment is using the
&lt;code&gt;CONFIG_ENVIRONMENT&lt;/code&gt; environment variable.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# run in this way&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt; &lt;span class="n"&gt;CONFIG_ENVIRONMENT&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;'dev'&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;my_incredible_script&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then, in &lt;tt class="docutils literal"&gt;my_incredible_script.py&lt;/tt&gt; when the &lt;code&gt;get_config&lt;/code&gt; function is
used, we do not need to specify an environment as it will use the &lt;code&gt;dev&lt;/code&gt;
environment that is defined by &lt;code&gt;CONFIG_ENVIRONMENT&lt;/code&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# and in my_incredible_script.py we can use get_config&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;settei&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_config&lt;/span&gt;

&lt;span class="c"&gt;# get config settings for 'application1' application and 'dev' environment,&lt;/span&gt;
&lt;span class="c"&gt;# which has been specified when running my_incredible_script.py&lt;/span&gt;
&lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'application1'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="settings-inheritance"&gt;
&lt;h3&gt;&lt;a class="toc-backref" href="#id12"&gt;Settings inheritance&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Settings can also inherit other settings. However, this is only possible
for settings that belong to the same group of environments. For instance, if
you want your &lt;code&gt;local&lt;/code&gt; settings to inherit the &lt;code&gt;default&lt;/code&gt; settings,
then in the &lt;code&gt;generate_config&lt;/code&gt; function you should mention the name of
environment from which you want to inherit.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# in your application1/local_settings.py file&lt;/span&gt;
&lt;span class="c"&gt;# 'default' is the environment from which we want to inherit settings&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="c"&gt;# change a setting, the right answer is 42&lt;/span&gt;
    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ANSWER'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;default&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If we read the &lt;code&gt;local&lt;/code&gt; settings, then we will see that
&lt;code&gt;config['ANSWER']&lt;/code&gt; setting returns the value defined in
&lt;code&gt;local_settings.py&lt;/code&gt;, as we would expect.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;settei&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_config&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;'application1'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;'local'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'QUESTION'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;Ultimate&lt;/span&gt; &lt;span class="n"&gt;Question&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;Life&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;Universe&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;Everything&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="n"&gt;config&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ANSWER'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="mi"&gt;42&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inheriting other settings does not stop us from introducing additional ones.
Attention should be paid though as new settings could be overwritten by any
inherited ones with the same name.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# in your package/application1/local_settings.py file&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;settei.config&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;generate_config&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Config&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c"&gt;# change a setting, the right answer is 42&lt;/span&gt;
    &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ANSWER'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;42&lt;/span&gt;

    &lt;span class="c"&gt;# introduce an additional setting&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'NEW'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'A new setting'&lt;/span&gt;

    &lt;span class="c"&gt;# this will be overwritten with the 'ANSWER' from the 'default' environment&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s"&gt;'ANSWER'&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;43&lt;/span&gt;

    &lt;span class="c"&gt;# update the 'local' settings with the 'default' settings&lt;/span&gt;
    &lt;span class="n"&gt;local&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c"&gt;# local['ANSWER'] will be 42 here again&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;local&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If the provided environment in &lt;code&gt;generate_config&lt;/code&gt; is missing or not
specified, then an &lt;code&gt;EnvironmentIsMissing&lt;/code&gt; or &lt;code&gt;EnvironmentNotSpecified&lt;/code&gt;
exception will be raised respectively. If we try to specify more than one
environment to inherit settings from, then a &lt;code&gt;MoreThanOneDependencyInjection&lt;/code&gt;
exception will be raised.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;&lt;a class="toc-backref" href="#id13"&gt;Conclusion&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;settei&lt;/code&gt; is a package, which bases its implementation on the concept of
entry points from setuptools, to provide a maintainable way of creating configuration
settings. &lt;code&gt;settei&lt;/code&gt; makes it very easy and intuitive to introduce a new environment,
e.g. a live environment, where settings usually differ a lot from those used
during development. Finally, settings inheritance, which is accomplished by using
dependency injection, provides the modularity and extensibility we needed.&lt;/p&gt;
&lt;/div&gt;
</summary><category term="open source"></category><category term="python"></category><category term="settings"></category><category term="entry points"></category><category term="setuptools"></category></entry></feed>